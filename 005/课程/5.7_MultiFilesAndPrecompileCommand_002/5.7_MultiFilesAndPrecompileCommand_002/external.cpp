#include <iostream>
using namespace std;

//1.extern加变量类型加变量名，表示对同一项目中不同编译单元的变量的引用声明。
extern int i;

//2.如果在同一项目中，已经在一个编译单元中有了一个变量的定义性声明，那么在其他编译单元中对同名变量的声明都会算作是重新声明已有变量的错误，不管这个变量是否有了初始值。
//2.对变量的定义性声明只能是唯一的！
/*
int j = 3;
extern int k = 3;
*/

//3.像这种用extern修饰的声明语句，实际上加不加extern都是一样的。因为其本质就是对变量的定义性声明。如果这是一个在项目中已存在的变量，那么这种定义性声明形式就是错误的；如果这是一个在项目中不存在的变量，那么加不加extern，结果都是对变量的定义性声明。
extern int l = 1;

void other()
{
	i++;
	cout << "i: " << i << endl;

}

//6.同一个项目下只能有一个main()函数。像下面这样的写法实际就是对main函数进行了重新定义，是错误的。
//6.写这个的原因是我想看看在变量定义之外的编译单元中对变量进行值的改变，回到那个变量定义的编译单元时是否会保留改变。但如果只能有一个main()函数的话，即使出现改变也是main()函数调用其他函数中的函数。也就是说改变一定会保留，这个问题没什么实际意义。
/*
int main()
{
	j = 4;
}

//6.如果直接在外面写这样的变量赋值语句会直接报错。因为这个变量既不在类中，也没有主函数可以去执行这句赋值语句。
j = 4;
*/
