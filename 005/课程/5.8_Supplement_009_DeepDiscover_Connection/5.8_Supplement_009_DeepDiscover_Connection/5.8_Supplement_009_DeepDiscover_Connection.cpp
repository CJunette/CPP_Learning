// 5.8_Supplement_009_DeepDiscover_Connection.cpp : This file contains the 'main' function. Program execution begins and ends there.
//这里是在看了书上p182-185的内容后，对书上未讲到的类及其成员在编译连接过程中所在的位置的猜测。
//以下全为猜测，无任何依据。

//这里最大的问题应该是那些非静态函数成员到底要放到哪里。
//因为符号表中的对象是“静态生存期对象或函数”及“被引用但未定义的外部变量、外部函数”。而类内的这些函数都具有动态生存期。
//如果从书上对“静态生存期对象”的初始化的相关描述看，“局部作用域中的静态生存期对象，其初始化代码一般会内嵌在函数体中”，那么这些函数的声明与定义就都属于代码段的范畴。
//而对于类中的静态函数成员，由于有“静态生存期”，因此应该是在符号表中。对于类中的静态数据成员，由于其初始化一定要在类体外执行，因此应该是在未初始化的数据段中。
//另外，类A到底要放在哪里也是个大问题。


#include <iostream>

class A
{
	public:
	A();//声明语句，在符号表中。
	int getX()//这个是动态生存期函数的定义，我真的不知道要放哪里，可能还是代码段中吧。
	{
		return x;//函数代码，在代码段中。
	}
	static int getY()//静态生存期函数（应该算是），在符号表中。
	{
		return y;//函数代码，在代码段中。
	}

	int getR() const//常函数，应该与其他的非静态函数成员一样，在代码段中。
	{
		return r;//函数代码，在代码段中。
	}

	private:
	int x;//数据成员，应该是在符号表中（在未创建对象时都是声明但未定义的状态）。
	int z = 0;//数据成员，应该是在符号表中（虽然有初始值但是仍然是局部变量）。
	static int y;//静态数据成员，应该是在未初始化的数据段（.bss）中。
	const int r;//常成员，应该是在符号表中（到创建对象才会初始化）。
};

int A::y = 0;//函数代码，在代码段中。

A::A() ://上面动态生存期函数的定义，应该也是在代码段中。
	r(0)//函数代码，在代码段中。
{
	x = 0;//函数代码，在代码段中。
}


int main()
{
    std::cout << "Hello World!\n";
}

